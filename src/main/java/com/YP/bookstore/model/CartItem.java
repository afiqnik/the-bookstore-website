package com.YP.bookstore.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import lombok.Data;

/**
 * The CartItem class represents an item in a user's shopping cart.
 * This class is annotated as an entity, meaning it maps to a table in the
 * database.
 */
@Data
@Entity
public class CartItem {

    /**
     * The unique identifier for the cart item.
     * This value is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The user to whom this cart item belongs.
     * This is a many-to-one relationship, meaning each user can have multiple cart
     * items.
     * This field is mandatory (nullable = false).
     */
    @ManyToOne(optional = false)
    @JoinColumn(name = "userID", unique = false, nullable = false)
    private User user;

    /**
     * The product that is added to the cart.
     * This is a many-to-one relationship, meaning each product can appear in
     * multiple cart items.
     * This field is mandatory (nullable = false).
     */
    @ManyToOne(optional = false)
    @JoinColumn(name = "productID", nullable = false, unique = false)
    private Product product;

    /**
     * The order that this cart item is associated with.
     * This is an optional many-to-one relationship.
     * This field can be null if the cart item has not been ordered yet.
     */
    @ManyToOne(optional = true)
    @JoinColumn(name = "orderID", unique = false)
    private Orders order;

    /**
     * The quantity of the product in the cart.
     * This field represents how many units of the product the user wants to
     * purchase.
     */
    private Integer quantity;

    /**
     * The price of the cart item.
     * This field represents the total price for the quantity of the product in the
     * cart.
     */
    private Double price;
}
